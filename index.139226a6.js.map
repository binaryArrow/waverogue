{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-3a6a7528e720cdcb.js","src/models/GameObject.ts","src/models/Character.ts","src/helpers/EasingFunctions.ts","src/models/Constants.ts","src/models/RectHitbox.ts","node_modules/@parcel/runtime-js/lib/runtime-cf3ffd13cdc3a6ed.js","node_modules/@parcel/runtime-js/lib/runtime-d946f12b28fbf1d7.js","node_modules/@parcel/runtime-js/lib/runtime-3782c015c36d10f3.js","node_modules/@parcel/runtime-js/lib/runtime-49afaf226fb1a4e9.js","node_modules/@parcel/runtime-js/lib/runtime-adcea8450f640214.js","node_modules/@parcel/runtime-js/lib/runtime-df0a104d90117523.js","node_modules/@parcel/runtime-js/lib/runtime-f291f1851c9c263c.js","node_modules/@parcel/runtime-js/lib/runtime-414fbc3690646ab2.js","node_modules/@parcel/runtime-js/lib/runtime-663e02c824b60007.js","node_modules/@parcel/runtime-js/lib/runtime-6693a902d464dc84.js","node_modules/@parcel/runtime-js/lib/runtime-15fa51362aa799ad.js","node_modules/@parcel/runtime-js/lib/runtime-e5155a6e94510645.js","node_modules/@parcel/runtime-js/lib/runtime-bbd6d0d7b28d5cf1.js","node_modules/@parcel/runtime-js/lib/runtime-4c3d06cf6a9f6a88.js","node_modules/@parcel/runtime-js/lib/runtime-dd1662d462f1e432.js","node_modules/@parcel/runtime-js/lib/runtime-b45a09f634d23ea4.js","node_modules/@parcel/runtime-js/lib/runtime-5c322a03a8b6449f.js","node_modules/@parcel/runtime-js/lib/runtime-e83a5cd490abe172.js","node_modules/@parcel/runtime-js/lib/runtime-368661d78135403b.js","node_modules/@parcel/runtime-js/lib/runtime-8a4ea8419bc8220f.js","src/models/SpriteSheet.ts","src/models/Sprite.ts","src/models/player/PlayerSprites.ts","src/models/player/Player.ts","src/models/Rect.ts","src/models/levelmodels/Top.ts","src/models/levelmodels/Wall.ts","src/models/levelmodels/WallCollusionpoints.ts","src/models/levelmodels/Bottom.ts","src/helpers/Collusion.ts","node_modules/@parcel/runtime-js/lib/runtime-d77884c2f155e6e9.js","node_modules/@parcel/runtime-js/lib/runtime-97cf5f72316e6359.js","node_modules/@parcel/runtime-js/lib/runtime-ab0bff740f8ceded.js","node_modules/@parcel/runtime-js/lib/runtime-c112285a49dbc9a4.js","node_modules/@parcel/runtime-js/lib/runtime-b61dd103245bbc55.js","node_modules/@parcel/runtime-js/lib/runtime-4aa1841e505aac39.js","node_modules/@parcel/runtime-js/lib/runtime-72c05c0a24bdda46.js","node_modules/@parcel/runtime-js/lib/runtime-46f608b23fc93a8b.js","node_modules/@parcel/runtime-js/lib/runtime-4baa5c1446b017c3.js","node_modules/@parcel/runtime-js/lib/runtime-2d156c699deb6db9.js","src/models/enemies/SkeletonSprites.ts","src/models/enemies/Skeleton.ts","src/helpers/LogicHelper.ts","src/models/levels/Level1.ts","src/models/levelmodels/Level.ts","src/UI/PlayerUI.ts","node_modules/@parcel/runtime-js/lib/runtime-961b8cb98631d642.js","src/helpers/LevelHelper.ts","src/main.ts","src/helpers/InitHelper.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"aT88m\\\":\\\"index.139226a6.js\\\",\\\"7mPVQ\\\":\\\"player_idle.8090cfb0.png\\\",\\\"cFRPW\\\":\\\"player_idle_left.48fbf389.png\\\",\\\"hYLHF\\\":\\\"player_run_right.79c89377.png\\\",\\\"hjE6S\\\":\\\"player_run_left.c3b195f5.png\\\",\\\"jcSwW\\\":\\\"player_jump_right.ea2ec690.png\\\",\\\"8Sqnk\\\":\\\"player_jump_left.f14862bd.png\\\",\\\"lMJwv\\\":\\\"player_fall_right.f8a07a8c.png\\\",\\\"eeLlx\\\":\\\"player_fall_left.b4a2ccaf.png\\\",\\\"amK9J\\\":\\\"player_crouch_right.1aa28ded.png\\\",\\\"7EwGS\\\":\\\"player_crouch_left.4b3b2458.png\\\",\\\"9zpHm\\\":\\\"player_dash_right.6c9fbc0f.png\\\",\\\"b2ZHf\\\":\\\"player_dash_left.aec0f2f0.png\\\",\\\"h6VF7\\\":\\\"player_attack_1_right.d47c420e.png\\\",\\\"kraFs\\\":\\\"player_attack_1_left.780e3e84.png\\\",\\\"4dZjq\\\":\\\"player_hurt_right.3811c37e.png\\\",\\\"lBN61\\\":\\\"player_hurt_left.81b37c21.png\\\",\\\"l6AEb\\\":\\\"player_die_right.8048e3c4.png\\\",\\\"9nAjx\\\":\\\"player_dead_right.ad5fcca4.png\\\",\\\"2753j\\\":\\\"player_die_left.ea81658d.png\\\",\\\"bH4Hm\\\":\\\"player_dead_left.8f9ac271.png\\\",\\\"5InCD\\\":\\\"skeleton_idle_right.4199dc9b.png\\\",\\\"kmxRn\\\":\\\"skeleton_idle_left.6a02327d.png\\\",\\\"3x1nC\\\":\\\"take_hit_right.c2ee671a.png\\\",\\\"4NeLc\\\":\\\"take_hit_left.ce2af2ea.png\\\",\\\"lF0Od\\\":\\\"walk_right.188164c4.png\\\",\\\"3DHVn\\\":\\\"walk_left.01cefb62.png\\\",\\\"1Nzm6\\\":\\\"skeleton_attack_right.991f8bfb.png\\\",\\\"04oTN\\\":\\\"skeleton_attack_left.87808b77.png\\\",\\\"aJOfs\\\":\\\"skeleton_die_right.ce8e3875.png\\\",\\\"UO3K2\\\":\\\"skeleton_die_left.cf7b3701.png\\\",\\\"aeL0w\\\":\\\"map.c9a313ac.png\\\"}\"));","export class GameObject {\r\n    context: CanvasRenderingContext2D\r\n    gravity: number = 10\r\n    velocityX: number = 0\r\n    velocityY: number = 100\r\n    startVelocity: number = 100 // this must be same es velocityY, it is for calculating inair without a jump\r\n    inAir: boolean = true\r\n    posX: number\r\n    posY: number\r\n    movementSpeed: number = 0\r\n    fallSpeed: number = 0\r\n    jumpSpeed: number\r\n    width: number\r\n    height: number\r\n    collides: boolean = false\r\n    moveLeftIndicator: boolean = false\r\n    moveRightIndicator: boolean = false\r\n    jumpIndicator: boolean = false\r\n    hit: boolean = false\r\n    hitLeft: boolean = false\r\n    hitRight: boolean = false\r\n    attackRight: boolean = false\r\n    attackLeft: boolean = false\r\n    dead: boolean = false\r\n\r\n    constructor(\r\n        context: CanvasRenderingContext2D,\r\n        x: number,\r\n        y: number,\r\n        movementSpeed: number,\r\n        jumpSpeed: number,\r\n        width: number,\r\n        height: number\r\n    ) {\r\n        this.context = context\r\n        this.posX = x\r\n        this.posY = y\r\n        this.movementSpeed = movementSpeed\r\n        this.jumpSpeed = jumpSpeed\r\n        this.width = width\r\n        this.height = height\r\n        this.fallSpeed = this.velocityY\r\n    }\r\n\r\n    /**\r\n     * @param visible show hitbox\r\n     * @param visibleOutlines show outline of hitbox\r\n     */\r\n    draw(visible: boolean, visibleOutlines: boolean) {\r\n        this.context.imageSmoothingEnabled = false\r\n        this.context.fillStyle = this.collides ? '#a66c6c' : '#94c781'\r\n        this.context.strokeStyle = '#ff2929'\r\n        this.context.lineWidth = 2\r\n        if (visible) {\r\n            this.context.fillRect(this.posX, this.posY, this.width, this.height)\r\n            this.context.strokeRect(this.posX, this.posY, this.width, this.height)\r\n        }\r\n        if(visibleOutlines)\r\n            this.context.strokeRect(this.posX, this.posY, this.width, this.height)\r\n    }\r\n\r\n    moveLeft(): void {\r\n        this.velocityX = -this.movementSpeed\r\n    }\r\n\r\n    moveRight(): void {\r\n        this.velocityX = this.movementSpeed\r\n    }\r\n\r\n    stopMovingXAxis(): void {\r\n        this.velocityX = 0\r\n    }\r\n\r\n    fall(secondsPassed: number) {\r\n        secondsPassed = Math.min(secondsPassed, 0.012) // this piece of shit prevents falling when changing tabs\r\n        this.velocityY += this.gravity\r\n        this.posY += Math.floor(this.velocityY * secondsPassed)\r\n        if(this.velocityY > this.startVelocity + this.gravity)\r\n            this.inAir = true\r\n    }\r\n\r\n    update(secondsPassed: number): void {\r\n    }\r\n\r\n}","import {GameObject} from \"./GameObject\";\r\n\r\nexport interface Character {\r\n    faceDirection: FaceDirection\r\n    health: number\r\n    attackDamage: number\r\n    referenceGameObject?: GameObject\r\n    fall(secondsPassed: number): void // fall\r\n    setRollPosition(secondsPassed: number): void // roll\r\n    applyVelocity(secondsPassed: number): void // apply overall velocity (x, and y axis)\r\n    updateMovement(secondsPassed: number): void // updating movement when keys pressed\r\n    jump(): void // apply jump velocity\r\n\r\n}\r\n\r\nexport enum FaceDirection{\r\n    LEFT,\r\n    RIGHT\r\n}","export function easeInOutQuint(t: number, b: number, c: number, d: number): number {\r\n    if ((t /= d / 2) < 1)\r\n        return c / 2 * t * t * t * t * t + b;\r\n    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\r\n}","export class Constants{\r\n    static playerRollCooldown: number = 0.8 // in seconds\r\n    static playerAttackSpeed: number = 0.5\r\n    static activateAttackHitbox: number = 0.3\r\n    static playerHeight: number = 68 // if you change this, change playerheightcrouch aswell to half of this value\r\n    static playerHeightCrouch: number = 34\r\n    static playerMoveSpeed: number = 300\r\n    static playerWidth: number = 20\r\n    static playerJumpSpeed: number = 300\r\n    static playerAttackCooldown: number = 0.5\r\n    static playerHitCooldown: number = 1\r\n    static playerDieAnimationTime: number = 0.4\r\n\r\n    static skeletonHeight: number = 90\r\n    static skeletonWidth: number = 30\r\n    static skeletonMovementSpeed: number = 150\r\n    static skeletonAttackSpeed: number = 0.5\r\n    static skeletonHitCooldown: number = 0.5\r\n    static skeletonActivateHitbox: number = 0.4\r\n    static skeletonAttackCooldown: number = 0.3\r\n    static skeletonDieAnimationtime: number = 0.4\r\n}","export class RectHitbox {\r\n    posX: number\r\n    posY: number\r\n    width: number\r\n    height: number\r\n\r\n    constructor(posX: number, posY: number, width: number, height: number) {\r\n        this.posX = posX\r\n        this.posY = posY\r\n        this.width = width\r\n        this.height = height\r\n    }\r\n}","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7mPVQ\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"cFRPW\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"hYLHF\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"hjE6S\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"jcSwW\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"8Sqnk\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"lMJwv\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"eeLlx\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"amK9J\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7EwGS\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"9zpHm\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"b2ZHf\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"h6VF7\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"kraFs\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"4dZjq\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"lBN61\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"l6AEb\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"9nAjx\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"2753j\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"bH4Hm\")).toString();","export class SpriteSheet {\r\n\r\n    // width of individual srpite in spritesheet\r\n    singleSpriteWidth: number\r\n    singleSpriteHeight: number\r\n    // number of individual Sprites in spritesheet\r\n    singleSpriteCount: number\r\n    context: CanvasRenderingContext2D\r\n    image = new Image()\r\n    frame: number = 0\r\n    startingPoint: number = 0\r\n\r\n    constructor(singleSpriteWidth: number, singleSpriteHeight: number, singleSpriteCount: number, imgSource: any, context: CanvasRenderingContext2D) {\r\n        this.singleSpriteWidth = singleSpriteWidth\r\n        this.singleSpriteHeight = singleSpriteHeight\r\n        this.context = context\r\n        this.image.src = imgSource\r\n        this.singleSpriteCount = singleSpriteCount\r\n    }\r\n\r\n    drawIndividualSprite(column: number, row: number, width: number, height: number, posX: number, posY: number) {\r\n        this.context.drawImage(\r\n            this.image,\r\n            column * this.singleSpriteWidth,\r\n            row * this.singleSpriteHeight,\r\n            this.singleSpriteWidth,\r\n            this.singleSpriteHeight,\r\n            posX,\r\n            posY,\r\n            width,\r\n            height);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param speed speed of animation calculated by framerate 60\r\n     * @param posX\r\n     * @param posY\r\n     * @param width\r\n     * @param height\r\n     * @param playerWidth\r\n     * @param playerHeight\r\n     */\r\n    animate(speed: number, posX: number, posY: number, width: number, height: number, playerWidth: number, playerHeight: number) {\r\n        if (this.frame % speed == 0) {\r\n            this.startingPoint++;\r\n            if (this.startingPoint >= this.singleSpriteCount)\r\n                this.startingPoint = 0\r\n        }\r\n        this.drawIndividualSprite(this.startingPoint, 0, width, height, posX - playerWidth / 2, posY - playerHeight / 2)\r\n        this.frame++\r\n        if (this.frame >= 60)\r\n            this.frame = 0\r\n    }\r\n\r\n    animationFinished(): boolean {\r\n        return this.startingPoint === this.singleSpriteCount || this.startingPoint == 0;\r\n    }\r\n\r\n    resetActualsprite() {\r\n        this.startingPoint = 0\r\n    }\r\n}","export class Sprite{\r\n    image = new Image()\r\n    context: CanvasRenderingContext2D\r\n\r\n    constructor(imgSource: any, context: CanvasRenderingContext2D ) {\r\n        this.image.src = imgSource\r\n        this.context = context\r\n    }\r\n\r\n    drawSprite(posX: number, posY: number, width: number, height: number){\r\n        this.context.drawImage(this.image, posX, posY, width, height)\r\n    }\r\n}","import playerIdleRight from \"../../assets/player/player_idle.png\"\r\nimport playerIdleLeft from \"../../assets/player/player_idle_left.png\"\r\nimport playerRunRight from \"../../assets/player/player_run_right.png\"\r\nimport playerRunLeft from \"../../assets/player/player_run_left.png\"\r\nimport playerJumpRight from \"../../assets/player/player_jump_right.png\"\r\nimport playerJumpLeft from \"../../assets/player/player_jump_left.png\"\r\nimport playerFallRight from \"../../assets/player/player_fall_right.png\"\r\nimport playerFallLeft from \"../../assets/player/player_fall_left.png\"\r\nimport playerCrouchRight from \"../../assets/player/player_crouch_right.png\"\r\nimport playerCrouchLeft from \"../../assets/player/player_crouch_left.png\"\r\nimport playerDashRight from \"../../assets/player/player_dash_right.png\"\r\nimport playerDashLeft from \"../../assets/player/player_dash_left.png\"\r\nimport playerAttack1Right from \"../../assets/player/player_attack_1_right.png\"\r\nimport playerAttack1Left from \"../../assets/player/player_attack_1_left.png\"\r\nimport playerHurtRight from \"../../assets/player/player_hurt_right.png\"\r\nimport playerHurtLeft from \"../../assets/player/player_hurt_left.png\"\r\nimport playerDieRight from \"../../assets/player/player_die_right.png\"\r\nimport playerDeadRight from \"../../assets/player/player_dead_right.png\"\r\nimport playerDieLeft from \"../../assets/player/player_die_left.png\"\r\nimport playerDeadLeft from \"../../assets/player/player_dead_left.png\"\r\nimport {SpriteSheet} from \"../SpriteSheet\";\r\nimport {Sprite} from \"../Sprite\";\r\n\r\nexport class PlayerSprites{\r\n\r\n    context: CanvasRenderingContext2D\r\n    spriteSheetPlayerIdleRight: SpriteSheet\r\n    spriteSheetPlayerIdleLeft: SpriteSheet\r\n    spriteSheetPlayerRunRight: SpriteSheet\r\n    spriteSheetPlayerRunLeft: SpriteSheet\r\n    spriteSheetPlayerJumpRight: SpriteSheet\r\n    spriteSheetPlayerJumpLeft: SpriteSheet\r\n    spriteSheetPlayerFallRight: SpriteSheet\r\n    spriteSheetPlayerFallLeft: SpriteSheet\r\n    spriteSheetPlayerCrouchRight: SpriteSheet\r\n    spriteSheetPlayerCrouchLeft: SpriteSheet\r\n    spriteSheetPlayerAttack1Right: SpriteSheet\r\n    spriteSheetPlayerAttack1Left: SpriteSheet\r\n    spriteSheetPlayerHurtRight: SpriteSheet\r\n    spriteSheetPlayerHurtLeft: SpriteSheet\r\n    spriteSheetPlayerDieRight: SpriteSheet\r\n    spriteSheetPlayerDieLeft: SpriteSheet\r\n    spritePlayerDeadRight: Sprite\r\n    spritePlayerDeadLeft: Sprite\r\n    spritePlayerDashRight: Sprite\r\n    spritePlayerDashLeft: Sprite\r\n\r\n    constructor(context: CanvasRenderingContext2D) {\r\n        this.context = context\r\n        this.spriteSheetPlayerIdleRight = new SpriteSheet(24, 37,5,  playerIdleRight, context)\r\n        this.spriteSheetPlayerIdleLeft = new SpriteSheet(24, 37,5,  playerIdleLeft, context)\r\n        this.spriteSheetPlayerRunRight = new SpriteSheet(30, 36, 8, playerRunRight, context )\r\n        this.spriteSheetPlayerRunLeft = new SpriteSheet(30, 36, 8, playerRunLeft, context)\r\n        this.spriteSheetPlayerJumpRight = new SpriteSheet(24, 37,3,  playerJumpRight, context)\r\n        this.spriteSheetPlayerJumpLeft = new SpriteSheet(24, 37,3,  playerJumpLeft, context)\r\n        this.spriteSheetPlayerFallRight = new SpriteSheet(24, 37,3,  playerFallRight, context)\r\n        this.spriteSheetPlayerFallLeft = new SpriteSheet(24, 37,3,  playerFallLeft, context)\r\n        this.spriteSheetPlayerCrouchRight = new SpriteSheet(24, 37,4,  playerCrouchRight, context)\r\n        this.spriteSheetPlayerCrouchLeft = new SpriteSheet(24, 37,4,  playerCrouchLeft, context)\r\n        this.spriteSheetPlayerAttack1Right = new SpriteSheet(56, 44, 8, playerAttack1Right, context)\r\n        this.spriteSheetPlayerAttack1Left = new SpriteSheet(56, 44, 8, playerAttack1Left, context)\r\n        this.spriteSheetPlayerHurtRight = new SpriteSheet(64, 44, 4, playerHurtRight, context)\r\n        this.spriteSheetPlayerHurtLeft = new SpriteSheet(64, 44, 4, playerHurtLeft, context)\r\n        this.spriteSheetPlayerDieRight = new SpriteSheet(64, 44, 11, playerDieRight, context)\r\n        this.spriteSheetPlayerDieLeft = new SpriteSheet(64, 44, 11, playerDieLeft, context)\r\n        this.spritePlayerDeadRight = new Sprite(playerDeadRight, context)\r\n        this.spritePlayerDeadLeft = new Sprite(playerDeadLeft, context)\r\n        this.spritePlayerDashRight = new Sprite(playerDashRight, context)\r\n        this.spritePlayerDashLeft = new Sprite(playerDashLeft, context)\r\n\r\n    }\r\n\r\n}","import {GameObject} from \"../GameObject\";\r\nimport {Character, FaceDirection} from \"../Character\";\r\nimport {easeInOutQuint} from \"../../helpers/EasingFunctions\";\r\nimport {Constants} from \"../Constants\";\r\nimport {RectHitbox} from \"../RectHitbox\";\r\nimport {PlayerSprites} from \"./PlayerSprites\";\r\n\r\nexport class Player extends GameObject implements Character {\r\n    faceDirection: FaceDirection = FaceDirection.RIGHT\r\n    attackHitbox: RectHitbox = new RectHitbox(this.posX, this.posY, this.width * 2, this.height)\r\n    sprites: PlayerSprites\r\n    dashIndicator: boolean = false\r\n    attackIndicator: boolean = false\r\n    crouchIndicator: boolean = false\r\n    isCrouching: boolean = false\r\n    dashRange: number = 25\r\n    timePassedRoll: number = 0\r\n    timePassedAttack: number = 0\r\n    rollCooldown: number = 0\r\n    health: number = 100\r\n    attackDamage: number = 10\r\n    activateDamage: boolean = false\r\n    rollPosition: number\r\n    attackCooldown: number = 0\r\n    hitCooldown: number = 0\r\n    timePassedDying: number = 0\r\n\r\n    constructor(\r\n        context: CanvasRenderingContext2D,\r\n        x: number,\r\n        y: number,\r\n        movementSpeed: number,\r\n        jumpSpeed: number,\r\n        width: number,\r\n        height: number\r\n    ) {\r\n        super(context, x, y, movementSpeed, jumpSpeed, width, height)\r\n        this.rollPosition = this.posX\r\n        this.initMovement()\r\n        this.sprites = new PlayerSprites(context)\r\n    }\r\n\r\n\r\n    update(secondsPassed: number) {\r\n        this.draw(false, false)\r\n        if (!this.dead)\r\n            this.updateMovement(secondsPassed)\r\n        this.animate(secondsPassed)\r\n        this.applyVelocity(secondsPassed)\r\n        //console.log(this.dead)\r\n    }\r\n\r\n    updateMovement(secondsPassed: number) {\r\n        if (this.moveLeftIndicator && !this.crouchIndicator)\r\n            this.moveLeft()\r\n        else if (this.moveRightIndicator && !this.crouchIndicator)\r\n            this.moveRight()\r\n        else if (!(this.moveRightIndicator && this.moveLeftIndicator))\r\n            this.stopMovingXAxis()\r\n        // jumping\r\n        if (this.jumpIndicator)\r\n            this.jump()\r\n        // rolling\r\n        if (this.dashIndicator) {\r\n            this.setRollPosition()\r\n            this.applyRoll(secondsPassed)\r\n        }\r\n        // attacking\r\n        if (this.attackIndicator) {\r\n            this.applyAttack(secondsPassed)\r\n        }\r\n        // crouch\r\n        if (this.crouchIndicator) {\r\n            this.applyCrouch()\r\n            if (this.moveLeftIndicator)\r\n                this.faceDirection = FaceDirection.LEFT\r\n            if (this.moveRightIndicator)\r\n                this.faceDirection = FaceDirection.RIGHT\r\n        }\r\n    }\r\n\r\n    applyVelocity(secondsPassed: number) {\r\n        if (!this.dashIndicator && !this.attackIndicator) {\r\n            if (this.velocityX < 0 && !this.hit)\r\n                this.faceDirection = FaceDirection.LEFT\r\n            else if (this.velocityX > 0 && !this.hit)\r\n                this.faceDirection = FaceDirection.RIGHT\r\n            this.posX += this.velocityX * secondsPassed\r\n            if (this.rollCooldown > 0)\r\n                this.rollCooldown -= secondsPassed\r\n            if (this.attackCooldown > 0)\r\n                this.attackCooldown -= secondsPassed\r\n            if (this.hitCooldown > 0)\r\n                this.hitCooldown -= secondsPassed\r\n        }\r\n        this.fall(secondsPassed)\r\n    }\r\n\r\n\r\n    initMovement() {\r\n        window.addEventListener('click', () => {\r\n            if (!this.dashIndicator && this.timePassedAttack <= 0 && !this.inAir && !this.crouchIndicator && this.attackCooldown <= 0 && this.hitCooldown <= 0) {\r\n                this.attackIndicator = true\r\n                this.activateDamage = true\r\n                this.attackHitbox = {\r\n                    posX: 0,\r\n                    posY: 0,\r\n                    width: 0,\r\n                    height: 0\r\n                }\r\n            }\r\n        })\r\n        window.addEventListener('keypress', ev => {\r\n            if (ev.key === 'w' && !this.inAir && !this.isCrouching && !this.hit) {\r\n                this.jumpIndicator = true\r\n            }\r\n            if (ev.key === ' ' && !this.inAir && this.rollCooldown <= 0 && !this.attackIndicator && !this.collides && !this.hit) {\r\n                this.dashIndicator = true\r\n                this.crouchIndicator = false\r\n                this.resetCrouch()\r\n            }\r\n        })\r\n        window.addEventListener('keydown', (e) => {\r\n            if (!this.hit) {\r\n                switch (e.key) {\r\n                    case 'a':\r\n                        this.moveLeftIndicator = true\r\n                        break;\r\n                    case 'd':\r\n                        this.moveRightIndicator = true\r\n                        break;\r\n                    // case 's':\r\n                    //     if (!this.inAir && !this.attackIndicator)\r\n                    //         this.crouchIndicator = true\r\n                    //     break;\r\n                }\r\n            }\r\n        })\r\n        window.addEventListener('keyup', (e) => {\r\n            switch (e.key) {\r\n                case 'a':\r\n                    this.moveLeftIndicator = false\r\n                    break;\r\n                case 'd':\r\n                    this.moveRightIndicator = false\r\n                    break;\r\n                // case 's':\r\n                //     this.crouchIndicator = false\r\n                //     this.resetCrouch()\r\n                //     break;\r\n            }\r\n        })\r\n    }\r\n\r\n    // sets rollrange\r\n    setRollPosition(): void {\r\n        if (this.faceDirection == FaceDirection.RIGHT)\r\n            this.rollPosition = this.posX + this.dashRange\r\n        if (this.faceDirection == FaceDirection.LEFT)\r\n            this.rollPosition = this.posX - this.dashRange\r\n    }\r\n\r\n    applyRoll(secondsPassed: number) {\r\n        this.timePassedRoll += secondsPassed\r\n\r\n        if (this.faceDirection === FaceDirection.RIGHT) {\r\n            this.posX = easeInOutQuint(this.timePassedRoll, this.posX, this.dashRange, 0.2)\r\n            if (!this.collides)\r\n                this.sprites.spritePlayerDashRight.drawSprite(this.posX - this.width * 2, this.posY - 23, 120, 88)\r\n            else this.sprites.spriteSheetPlayerIdleRight.animate(10, this.posX, this.posY + 21, 40, 80, this.width, this.height)\r\n            if (this.posX >= this.rollPosition) {\r\n                this.timePassedRoll = 0\r\n                this.dashIndicator = false\r\n                this.posX = this.rollPosition\r\n                this.rollCooldown = Constants.playerRollCooldown\r\n            }\r\n        }\r\n        if (this.faceDirection === FaceDirection.LEFT) {\r\n            this.posX = easeInOutQuint(this.timePassedRoll, this.posX, -this.dashRange, 0.2)\r\n            if (!this.collides)\r\n                this.sprites.spritePlayerDashLeft.drawSprite(this.posX - this.width * 2 - 10, this.posY - 23, 120, 88)\r\n            else this.sprites.spriteSheetPlayerIdleLeft.animate(10, this.posX, this.posY + 21, 40, 80, this.width, this.height)\r\n            if (this.posX <= this.rollPosition) {\r\n                this.timePassedRoll = 0\r\n                this.dashIndicator = false\r\n                this.posX = this.rollPosition\r\n                this.rollCooldown = Constants.playerRollCooldown\r\n            }\r\n        }\r\n    }\r\n\r\n    applyAttack(secondsPassed: number) {\r\n        this.timePassedAttack += secondsPassed\r\n        if (this.faceDirection === FaceDirection.RIGHT && this.timePassedAttack > Constants.activateAttackHitbox) {\r\n            this.context.strokeStyle = '#000000'\r\n            this.attackHitbox = {\r\n                posX: this.posX + this.width,\r\n                posY: this.posY,\r\n                width: this.width * 2,\r\n                height: this.height\r\n            }\r\n            // show hitbox-----\r\n            // this.context.fillRect(this.attackHitbox.posX, this.attackHitbox.posY, this.attackHitbox.width, this.attackHitbox.height)\r\n\r\n            if (this.timePassedAttack >= Constants.playerAttackSpeed) {\r\n                this.attackIndicator = false\r\n                this.timePassedAttack = 0\r\n                this.attackCooldown = Constants.playerAttackCooldown\r\n            }\r\n        }\r\n        if (this.faceDirection === FaceDirection.LEFT && this.timePassedAttack > Constants.activateAttackHitbox) {\r\n            this.context.strokeStyle = '#000000'\r\n            this.attackHitbox = {\r\n                posX: this.posX - this.width * 2,\r\n                posY: this.posY,\r\n                width: this.width * 2,\r\n                height: this.height\r\n            }\r\n            // show hitbox ----\r\n            // this.context.fillRect(this.attackHitbox.posX, this.attackHitbox.posY, this.attackHitbox.width, this.attackHitbox.height)\r\n            if (this.timePassedAttack >= Constants.playerAttackSpeed) {\r\n                this.attackIndicator = false\r\n                this.timePassedAttack = 0\r\n                this.attackCooldown = Constants.playerAttackCooldown\r\n            }\r\n        }\r\n    }\r\n\r\n    jump(): void {\r\n        this.velocityY = -this.jumpSpeed\r\n        this.jumpIndicator = false\r\n        this.inAir = true\r\n    }\r\n\r\n    applyCrouch(): void {\r\n        if (!this.inAir) {\r\n            this.height = Constants.playerHeightCrouch\r\n            if (!this.isCrouching) {\r\n                this.posY += Constants.playerHeightCrouch\r\n                this.isCrouching = true\r\n            }\r\n        } else {\r\n            this.resetCrouch()\r\n        }\r\n    }\r\n\r\n    resetCrouch(): void {\r\n        if (this.isCrouching) {\r\n            this.movementSpeed = Constants.playerMoveSpeed\r\n            this.height = Constants.playerHeight\r\n            this.posY -= Constants.playerHeightCrouch\r\n            this.isCrouching = false\r\n        }\r\n    }\r\n\r\n    // TODO: REF DIIIIS\r\n    animate(secondsPassed: number): void {\r\n        if (!this.dead && !this.hit && this.velocityX > 0 && !this.inAir && !this.dashIndicator && !this.crouchIndicator && !this.attackIndicator)\r\n            this.sprites.spriteSheetPlayerRunRight.animate(5, this.posX, this.posY + 23, 50, 80, this.width + 20, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.velocityX < 0 && !this.inAir && !this.dashIndicator && !this.crouchIndicator && !this.attackIndicator)\r\n            this.sprites.spriteSheetPlayerRunLeft.animate(5, this.posX, this.posY + 23, 50, 80, this.width - 10, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.faceDirection == FaceDirection.RIGHT && !this.inAir && !this.crouchIndicator && !this.dashIndicator && !this.attackIndicator)\r\n            this.sprites.spriteSheetPlayerIdleRight.animate(10, this.posX, this.posY + 21, 40, 80, this.width, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.faceDirection == FaceDirection.LEFT && !this.inAir && !this.crouchIndicator && !this.dashIndicator && !this.attackIndicator)\r\n            this.sprites.spriteSheetPlayerIdleLeft.animate(10, this.posX, this.posY + 21, 40, 80, this.width, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.inAir && this.faceDirection == FaceDirection.RIGHT && this.velocityY <= 0 && !this.dashIndicator)\r\n            this.sprites.spriteSheetPlayerJumpRight.animate(10, this.posX, this.posY + 23, 40, 80, this.width, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.inAir && this.faceDirection == FaceDirection.LEFT && this.velocityY <= 0 && !this.dashIndicator)\r\n            this.sprites.spriteSheetPlayerJumpLeft.animate(10, this.posX, this.posY + 23, 40, 80, this.width, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.inAir && this.faceDirection == FaceDirection.RIGHT && this.velocityY >= 0 && !this.dashIndicator)\r\n            this.sprites.spriteSheetPlayerFallRight.animate(10, this.posX, this.posY + 23, 40, 80, this.width, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.inAir && this.faceDirection == FaceDirection.LEFT && this.velocityY >= 0 && !this.dashIndicator)\r\n            this.sprites.spriteSheetPlayerFallLeft.animate(10, this.posX, this.posY + 23, 40, 80, this.width, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.crouchIndicator && this.faceDirection == FaceDirection.RIGHT && !this.inAir && !this.dashIndicator && !this.attackIndicator)\r\n            this.sprites.spriteSheetPlayerCrouchRight.animate(13, this.posX, this.posY - 28, 40, 80, this.width, this.height)\r\n\r\n        else if (!this.dead && !this.hit && this.crouchIndicator && this.faceDirection == FaceDirection.LEFT && !this.inAir && !this.dashIndicator && !this.attackIndicator)\r\n            this.sprites.spriteSheetPlayerCrouchLeft.animate(13, this.posX, this.posY - 28, 40, 80, this.width, this.height)\r\n\r\n        if (!this.dead && !this.hit && this.attackIndicator && this.faceDirection == FaceDirection.RIGHT) {\r\n            this.sprites.spriteSheetPlayerAttack1Right.animate(4, this.posX - 15, this.posY + 13, 100, 90, this.width, this.height)\r\n        } else this.sprites.spriteSheetPlayerAttack1Right.resetActualsprite()\r\n\r\n        if (!this.dead && !this.hit && this.attackIndicator && this.faceDirection == FaceDirection.LEFT) {\r\n            this.sprites.spriteSheetPlayerAttack1Left.animate(4, this.posX - 45, this.posY + 13, 100, 90, this.width, this.height)\r\n        } else this.sprites.spriteSheetPlayerAttack1Left.resetActualsprite()\r\n\r\n        if (!this.dead && this.hit && this.hitRight && this.health > 0 && this.hitCooldown > 0) {\r\n            this.sprites.spriteSheetPlayerHurtRight.animate(7, this.posX - 25, this.posY + 8, 100, 100, this.width, this.height)\r\n            this.velocityX = -200\r\n            this.hitCooldown -= secondsPassed\r\n        }\r\n        if (!this.dead && this.hit && this.hitLeft && this.health > 0 && this.hitCooldown > 0) {\r\n            this.sprites.spriteSheetPlayerHurtLeft.animate(7, this.posX - 25, this.posY + 8, 100, 100, this.width, this.height)\r\n            this.velocityX = 200\r\n            this.hitCooldown -= secondsPassed\r\n        }\r\n        if (this.hitCooldown <= 0 && this.hit) {\r\n            this.hit = false\r\n            this.hitLeft = false\r\n            this.hitRight = false\r\n            this.stopMovingXAxis()\r\n        }\r\n        if (this.health <= 0 && this.faceDirection == FaceDirection.RIGHT) {\r\n            if (!this.dead)\r\n                this.sprites.spriteSheetPlayerDieRight.animate(8, this.posX - 50, this.posY + 5, 100, 100, this.width, this.height)\r\n            else this.sprites.spritePlayerDeadRight.drawSprite(this.posX - 60, this.posY - 30, 100, 100)\r\n            this.timePassedDying += secondsPassed\r\n            if (this.timePassedDying >= Constants.playerDieAnimationTime) {\r\n                this.dead = true\r\n            }\r\n        }\r\n        if (this.health <= 0 && this.faceDirection == FaceDirection.LEFT) {\r\n            if (!this.dead)\r\n                this.sprites.spriteSheetPlayerDieLeft.animate(8, this.posX + 20, this.posY + 5, 100, 100, this.width, this.height)\r\n            else this.sprites.spritePlayerDeadLeft.drawSprite(this.posX - 20,  this.posY - 30, 100, 100)\r\n            this.timePassedDying += secondsPassed\r\n            if (this.timePassedDying >= Constants.playerDieAnimationTime) {\r\n                this.dead = true\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","export class Rect {\r\n    x: number\r\n    y: number\r\n    width: number\r\n    height: number\r\n    context: CanvasRenderingContext2D\r\n    collides: boolean = false\r\n    constructor(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        this.x = x\r\n        this.y = y\r\n        this.width = width\r\n        this.height = height\r\n        this.context = context\r\n    }\r\n\r\n    draw(){\r\n        this.context.fillStyle = this.collides ? '#a66c6c':'#94c781'\r\n        this.context.strokeStyle = '#000000'\r\n        // v--- this is with no colors ---v\r\n        // this.context.fillStyle = this.collides ? 'rgba(255,255,255,0)':'rgba(121,211,75,0)'\r\n        // this.context.strokeStyle = 'rgba(0,0,0,0)'\r\n        this.context.lineWidth = 2\r\n        this.context.fillRect(this.x, this.y, this.width, this.height)\r\n        this.context.strokeRect(this.x, this.y, this.width, this.height)\r\n    }\r\n}","import {Rect} from \"../Rect\";\r\n\r\n// can be used as ground. Collusion on bottomside of gameobject\r\nexport class Top extends Rect{\r\n\r\n}","import {Rect} from \"../Rect\";\r\n\r\nexport class Wall extends Rect{\r\n\r\n}","export enum WallCollusionpoints{\r\n    LEFT,\r\n    RIGHT,\r\n    TOP,\r\n    BOTTOM,\r\n    NONE\r\n}","import {Rect} from \"../Rect\";\r\n\r\n// can be used as bottomside of an staticgameobject. Collusion on topside of gameobject\r\nexport class Bottom extends Rect{\r\n    draw(): void {\r\n        this.context.fillStyle = this.collides ? '#181818':'#c7819a'\r\n        this.context.strokeStyle = '#000000'\r\n        this.context.lineWidth = 2\r\n        this.context.fillRect(this.x, this.y, this.width, this.height)\r\n        this.context.strokeRect(this.x, this.y, this.width, this.height)\r\n    }\r\n}","import {GameObject} from \"../models/GameObject\";\r\nimport {Top} from \"../models/levelmodels/Top\";\r\nimport {MapElement} from \"../models/levelmodels/MapElement\";\r\nimport {Wall} from \"../models/levelmodels/Wall\";\r\nimport {WallCollusionpoints} from \"../models/levelmodels/WallCollusionpoints\";\r\nimport {Bottom} from \"../models/levelmodels/Bottom\";\r\n\r\nexport class Collusion {\r\n    gameObjects: GameObject[]\r\n    mapElements: MapElement[]\r\n    mapBoundaries: number[]\r\n\r\n    constructor(gameObjects: GameObject[], mapElements: MapElement[], mapBoundaries: number[]) {\r\n        this.gameObjects = gameObjects\r\n        this.mapElements = mapElements\r\n        this.mapBoundaries = mapBoundaries\r\n    }\r\n\r\n    applyTopCollusion(): void {\r\n        this.mapElements.forEach(mapElement => {\r\n            if (mapElement instanceof Top) {\r\n                this.gameObjects.forEach(gameObject => {\r\n                    if (gameObject.velocityY > 0 && collusionCheckTop(gameObject, mapElement)) {\r\n                        gameObject.posY = mapElement.y - gameObject.height\r\n                        gameObject.velocityY = gameObject.fallSpeed\r\n                        gameObject.inAir = false\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        function collusionCheckTop(object: GameObject, mapElement: MapElement): boolean {\r\n            return !(object.posX > mapElement.width + mapElement.x ||\r\n                object.posY + object.height > mapElement.height + mapElement.y ||\r\n                mapElement.x > object.width + object.posX ||\r\n                mapElement.y > object.height + object.posY)\r\n        }\r\n    }\r\n\r\n    applyWallCollisions(): void {\r\n        this.mapElements.forEach(mapElement => {\r\n            if (mapElement instanceof Wall) {\r\n                this.gameObjects.forEach(gameObject => {\r\n                    switch (this.checkLeftOrRightCollusion(gameObject, mapElement)) {\r\n                        case WallCollusionpoints.LEFT: {\r\n                            // mapElement.collides = true\r\n                            if (this.mapElements.filter(it => it.playerCollides).length > 0)\r\n                                gameObject.collides = true\r\n                            gameObject.posX = mapElement.x - gameObject.width\r\n                            break;\r\n                        }\r\n                        case WallCollusionpoints.RIGHT: {\r\n                            // mapElement.collides = true\r\n                            if (this.mapElements.filter(it => it.playerCollides).length > 0)\r\n                                gameObject.collides = true\r\n                            gameObject.posX = mapElement.x + mapElement.width\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            if (this.mapElements.filter(it => it.playerCollides).length == 0)\r\n                                gameObject.collides = false\r\n                            mapElement.collides = false\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    checkLeftOrRightCollusion(object: GameObject, mapElement: MapElement): WallCollusionpoints {\r\n        // check if gamobject collides with wall\r\n        if (!(object.posX > mapElement.width + mapElement.x ||\r\n            object.posY > mapElement.height + mapElement.y ||\r\n            mapElement.x > object.width + object.posX ||\r\n            mapElement.y > object.height + object.posY)) {\r\n            // console.log(object.posX + object.width + \" \" + object.posX + \"\\n\" + mapElement.x + \" \" + mapElement.x + mapElement.width)\r\n            // check if rect the right or left side and return the side where rect hits wall\r\n            if (mapElement.width <= 5) {\r\n                if (object.posX + object.width <= mapElement.x + mapElement.width * 2) {\r\n                    // console.log(\"left collusion\")\r\n                    mapElement.playerCollides = true\r\n                    return WallCollusionpoints.LEFT\r\n                }\r\n                if (object.posX >= mapElement.x - mapElement.width) {\r\n                    // console.log(\"right collusion\")\r\n                    mapElement.playerCollides = true\r\n                    return WallCollusionpoints.RIGHT\r\n                }\r\n            } else {\r\n                if (object.posX + object.width <= mapElement.x + mapElement.width) {\r\n                    // console.log(\"left collusion\")\r\n                    mapElement.playerCollides = true\r\n                    return WallCollusionpoints.LEFT\r\n                }\r\n                if (object.posX >= mapElement.x - mapElement.width) {\r\n                    // console.log(\"right collusion\")\r\n                    mapElement.playerCollides = true\r\n                    return WallCollusionpoints.RIGHT\r\n                }\r\n            }\r\n        }\r\n        mapElement.playerCollides = false\r\n        return WallCollusionpoints.NONE\r\n    }\r\n\r\n    applyBottomCollusion() {\r\n        this.mapElements.forEach(mapElement => {\r\n            if (mapElement instanceof Bottom) {\r\n                this.gameObjects.forEach(gameObject => {\r\n                    if (gameObject.velocityY < 0 &&\r\n                        collusionCheckBot(gameObject, mapElement) &&\r\n                        this.checkLeftOrRightCollusion(gameObject, mapElement) !== WallCollusionpoints.LEFT &&\r\n                        this.checkLeftOrRightCollusion(gameObject, mapElement) !== WallCollusionpoints.RIGHT\r\n                    ) {\r\n                        mapElement.collides = true\r\n                        gameObject.posY = mapElement.y + mapElement.height\r\n                        gameObject.velocityY = gameObject.fallSpeed\r\n                    } else mapElement.collides = false\r\n                })\r\n            }\r\n        })\r\n\r\n        function collusionCheckBot(object: GameObject, mapElement: MapElement): boolean {\r\n            return !(object.posX > mapElement.width + mapElement.x ||\r\n                object.posY > mapElement.height + mapElement.y ||\r\n                mapElement.x > object.width + object.posX ||\r\n                mapElement.y > object.height + object.posY)\r\n        }\r\n\r\n    }\r\n\r\n    applyMapBoundaries() {\r\n        this.gameObjects.forEach(gameObject => {\r\n            if (gameObject.posX < this.mapBoundaries[0])\r\n                gameObject.posX = this.mapBoundaries[0]\r\n            else if (gameObject.posX > this.mapBoundaries[1])\r\n                gameObject.posX = this.mapBoundaries[1]\r\n        })\r\n    }\r\n}","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"5InCD\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"kmxRn\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"3x1nC\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"4NeLc\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"lF0Od\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"3DHVn\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1Nzm6\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"04oTN\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"aJOfs\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"UO3K2\")).toString();","import {SpriteSheet} from \"../SpriteSheet\";\r\nimport skeletonIdleRight from \"../../assets/skeleton/skeleton_idle_right.png\"\r\nimport skeletonIdleLeft from \"../../assets/skeleton/skeleton_idle_left.png\"\r\nimport skeletonTakeHitRight from \"../../assets/skeleton/take_hit_right.png\"\r\nimport skeletonTakeHitLeft from \"../../assets/skeleton/take_hit_left.png\"\r\nimport skeletonWalkRight from \"../../assets/skeleton/walk_right.png\"\r\nimport skeletonWalkLeft from \"../../assets/skeleton/walk_left.png\"\r\nimport skeletonAttackRight from \"../../assets/skeleton/skeleton_attack_right.png\"\r\nimport skeletonAttackLeft from \"../../assets/skeleton/skeleton_attack_left.png\"\r\nimport skeletonDieRight from \"../../assets/skeleton/skeleton_die_right.png\"\r\nimport skeletonDieLeft from \"../../assets/skeleton/skeleton_die_left.png\"\r\n\r\nexport class SkeletonSprites{\r\n    context: CanvasRenderingContext2D\r\n    spriteSheetIdleRight: SpriteSheet\r\n    spriteSheetIdleLeft: SpriteSheet\r\n    spriteSheetTakeHitRight: SpriteSheet\r\n    spriteSheetTakeHitLeft: SpriteSheet\r\n    spriteSheetWalkLeft: SpriteSheet\r\n    spriteSheetWalkRight: SpriteSheet\r\n    spriteSheetAttackRight: SpriteSheet\r\n    spriteSheetAttackLeft: SpriteSheet\r\n    spriteSheetDieRight: SpriteSheet\r\n    spriteSheetDieLeft: SpriteSheet\r\n\r\n    constructor(context: CanvasRenderingContext2D) {\r\n        this.context = context\r\n        this.spriteSheetIdleRight = new SpriteSheet(150, 54, 4, skeletonIdleRight, this.context)\r\n        this.spriteSheetIdleLeft = new SpriteSheet(150, 54, 4, skeletonIdleLeft, this.context)\r\n        this.spriteSheetTakeHitRight = new SpriteSheet(150, 150, 4, skeletonTakeHitRight, this.context)\r\n        this.spriteSheetTakeHitLeft = new SpriteSheet(150, 150, 4, skeletonTakeHitLeft, this.context)\r\n        this.spriteSheetWalkRight = new SpriteSheet(150, 150, 4, skeletonWalkRight, this.context)\r\n        this.spriteSheetWalkLeft = new SpriteSheet(150, 150, 4, skeletonWalkLeft, this.context)\r\n        this.spriteSheetAttackRight = new SpriteSheet(150, 58, 7, skeletonAttackRight, this.context)\r\n        this.spriteSheetAttackLeft = new SpriteSheet(80, 58, 7, skeletonAttackLeft, this.context)\r\n        this.spriteSheetDieRight = new SpriteSheet(56, 54, 4, skeletonDieRight, this.context)\r\n        this.spriteSheetDieLeft = new SpriteSheet(56, 54, 4, skeletonDieLeft, this.context)\r\n    }\r\n}","import {GameObject} from \"../GameObject\";\r\nimport {Character, FaceDirection} from \"../Character\";\r\nimport {SkeletonSprites} from \"./SkeletonSprites\";\r\nimport {Constants} from \"../Constants\";\r\nimport {Player} from \"../player/Player\";\r\nimport {RectHitbox} from \"../RectHitbox\";\r\nimport {LogicHelper} from \"../../helpers/LogicHelper\";\r\n\r\nexport class Skeleton extends GameObject implements Character {\r\n\r\n    faceDirection: FaceDirection = FaceDirection.RIGHT\r\n    health: number = 100\r\n    attackDamage: number = 25\r\n    attackIndicator: boolean = false\r\n    width: number = Constants.skeletonWidth\r\n    height: number = Constants.skeletonHeight\r\n    attackHitbox: RectHitbox = new RectHitbox(this.posX, this.posY, this.width * 2 + 10, this.height)\r\n    timePassedAttack: number = 0\r\n    timePassedDying: number = 0\r\n    sprites: SkeletonSprites = new SkeletonSprites(this.context)\r\n    referenceGameObject: Player\r\n    hitCooldown: number = 0\r\n    attackCooldown: number = 0\r\n    activateDamage: boolean = false\r\n    private outerBarWidth: number = this.health;\r\n\r\n    constructor(context: CanvasRenderingContext2D,\r\n                x: number,\r\n                y: number,\r\n                movementSpeed: number,\r\n                jumpSpeed: number,\r\n                width: number,\r\n                height: number,\r\n                player: Player\r\n    ) {\r\n        super(context, x, y, movementSpeed, jumpSpeed, width, height);\r\n        this.referenceGameObject = player\r\n    }\r\n\r\n    update(secondsPassed: number) {\r\n        this.draw(false, false)\r\n        this.drawHealthBar()\r\n        if (this.referenceGameObject.dead) {\r\n            this.resetAttack()\r\n            this.attackIndicator = false\r\n        } else\r\n            this.updateMovement(secondsPassed)\r\n        this.animate(secondsPassed)\r\n        this.applyVelocity(secondsPassed)\r\n    }\r\n\r\n    applyVelocity(secondsPassed: number) {\r\n        this.posX += this.velocityX * secondsPassed\r\n        this.fall(secondsPassed)\r\n        if (this.hitCooldown > 0)\r\n            this.hitCooldown -= secondsPassed\r\n        if (this.attackCooldown > 0)\r\n            this.attackCooldown -= secondsPassed\r\n    }\r\n\r\n    draw(visible: boolean, visibleOutlines: boolean) {\r\n        this.context.fillStyle = this.collides ? '#a66c6c' : '#ba81c7'\r\n        if (this.hit)\r\n            this.context.fillStyle = '#ff0000'\r\n        this.context.strokeStyle = '#000000'\r\n        this.context.lineWidth = 2\r\n        if (visible) {\r\n            this.context.fillRect(this.posX, this.posY, this.width, this.height)\r\n            this.context.strokeRect(this.posX, this.posY, this.width, this.height)\r\n        }\r\n        if (visibleOutlines)\r\n            this.context.strokeRect(this.posX, this.posY, this.width, this.height)\r\n    }\r\n\r\n\r\n    updateMovement(secondsPassed: number): void {\r\n        if (this.referenceGameObject.posX + this.referenceGameObject.width < this.posX - this.width / 2 && !this.attackIndicator) {\r\n            this.moveLeft()\r\n            this.faceDirection = FaceDirection.LEFT\r\n        } else if (this.referenceGameObject.posX > this.posX + this.width + this.width / 2 && !this.attackIndicator) {\r\n            this.moveRight()\r\n            this.faceDirection = FaceDirection.RIGHT\r\n        } else {\r\n            this.stopMovingXAxis()\r\n        }\r\n        // apply attacks\r\n        if (LogicHelper.rectangularHitBoxIntersect(\r\n                this.referenceGameObject, {posX: this.posX, posY: this.posY, width: this.width * 2, height: this.height}) &&\r\n            this.attackCooldown <= 0\r\n            ||\r\n            LogicHelper.rectangularHitBoxIntersect(\r\n                this.referenceGameObject, {\r\n                    posX: this.posX - this.width,\r\n                    posY: this.posY,\r\n                    width: this.width * 2,\r\n                    height: this.height\r\n                }) &&\r\n            this.attackCooldown <= 0\r\n        )\r\n            this.attackIndicator = true\r\n        if (this.attackIndicator && this.hitCooldown <= 0) {\r\n            this.applyAttack(secondsPassed)\r\n        }\r\n    }\r\n\r\n    // TODO: pls REF THIS\r\n    animate(secondsPassed: number): void {\r\n        if (!this.hit && this.faceDirection == FaceDirection.RIGHT && this.velocityX == 0 && !this.attackIndicator && this.health > 0)\r\n            this.sprites.spriteSheetIdleRight.animate(12, this.posX - 65, this.posY + 34, 180, 100, this.width, this.height)\r\n\r\n        else if (!this.hit && this.faceDirection == FaceDirection.LEFT && this.velocityX == 0 && !this.attackIndicator && this.health > 0)\r\n            this.sprites.spriteSheetIdleLeft.animate(12, this.posX - 56, this.posY + 34, 180, 100, this.width, this.height)\r\n\r\n        else if (this.hit && this.faceDirection == FaceDirection.RIGHT && this.health > 0) {\r\n            this.stopMovingXAxis()\r\n            this.sprites.spriteSheetTakeHitRight.animate(7, this.posX - 65, this.posY - 48, 180, 270, this.width, this.height)\r\n            if (this.sprites.spriteSheetTakeHitRight.animationFinished()) this.hit = false\r\n        } else if (this.hit && this.faceDirection == FaceDirection.LEFT && this.health > 0) {\r\n            this.stopMovingXAxis()\r\n            this.sprites.spriteSheetTakeHitLeft.animate(7, this.posX - 65, this.posY - 48, 180, 270, this.width, this.height)\r\n            if (this.sprites.spriteSheetTakeHitLeft.animationFinished()) this.hit = false\r\n        } else if (this.velocityX < 0 && this.faceDirection == FaceDirection.LEFT && !this.attackIndicator && this.health > 0)\r\n            this.sprites.spriteSheetWalkLeft.animate(12, this.posX - 72, this.posY - 48, 180, 270, this.width, this.height)\r\n\r\n        else if (this.velocityX > 0 && this.faceDirection == FaceDirection.RIGHT && !this.attackIndicator && this.health > 0)\r\n            this.sprites.spriteSheetWalkRight.animate(12, this.posX - 65, this.posY - 48, 180, 270, this.width, this.height)\r\n\r\n        if (this.attackIndicator && this.faceDirection == FaceDirection.RIGHT && !this.hit && this.health > 0) {\r\n            this.stopMovingXAxis()\r\n            this.sprites.spriteSheetAttackRight.animate(4, this.posX - 60, this.posY + 35, 180, 100, this.width, this.height)\r\n        } else this.sprites.spriteSheetAttackRight.resetActualsprite()\r\n\r\n        if (this.attackIndicator && this.faceDirection == FaceDirection.LEFT && !this.hit && this.health > 0) {\r\n            this.stopMovingXAxis()\r\n            this.sprites.spriteSheetAttackLeft.animate(4, this.posX - 40, this.posY + 35, 100, 105, this.width, this.height)\r\n        } else this.sprites.spriteSheetAttackLeft.resetActualsprite()\r\n        if (this.health <= 0 && this.faceDirection == FaceDirection.RIGHT) {\r\n            this.sprites.spriteSheetDieRight.animate(8, this.posX, this.posY + 34, 60, 100, this.width, this.height)\r\n            this.timePassedDying += secondsPassed\r\n            if (this.timePassedDying >= Constants.skeletonDieAnimationtime) {\r\n                this.dead = true\r\n            }\r\n        }\r\n        if (this.health <= 0 && this.faceDirection == FaceDirection.LEFT) {\r\n            this.sprites.spriteSheetDieLeft.animate(8, this.posX, this.posY + 34, 60, 100, this.width, this.height)\r\n            this.timePassedDying += secondsPassed\r\n            if (this.timePassedDying >= Constants.skeletonDieAnimationtime) {\r\n                this.dead = true\r\n            }\r\n        }\r\n    }\r\n\r\n    setRollPosition(secondsPast: number) {\r\n    }\r\n\r\n    jump() {\r\n    }\r\n\r\n    resetAttack() {\r\n        this.attackRight = false\r\n        this.attackLeft = false\r\n        this.activateDamage = false\r\n    }\r\n\r\n    applyAttack(secondsPassed: number) {\r\n        this.timePassedAttack += secondsPassed\r\n        if (this.faceDirection === FaceDirection.RIGHT && this.timePassedAttack > Constants.skeletonActivateHitbox) {\r\n            this.context.strokeStyle = '#000000'\r\n            this.attackHitbox = {\r\n                posX: this.posX,\r\n                posY: this.posY,\r\n                width: this.width * 3,\r\n                height: this.height\r\n            }\r\n            // show hitbox-----\r\n            // this.context.fillRect(this.attackHitbox.posX, this.attackHitbox.posY, this.attackHitbox.width, this.attackHitbox.height)\r\n\r\n            if (this.timePassedAttack >= Constants.skeletonAttackSpeed) {\r\n                this.attackIndicator = false\r\n                this.attackRight = true\r\n                this.timePassedAttack = 0\r\n                this.attackCooldown = Constants.skeletonAttackCooldown\r\n                this.activateDamage = true\r\n            }\r\n        }\r\n        if (this.faceDirection === FaceDirection.LEFT && this.timePassedAttack > Constants.activateAttackHitbox) {\r\n            this.context.strokeStyle = '#000000'\r\n            this.attackHitbox = {\r\n                posX: this.posX - this.width - 30,\r\n                posY: this.posY,\r\n                width: this.width * 3,\r\n                height: this.height\r\n            }\r\n            // show hitbox ----\r\n            // this.context.fillRect(this.attackHitbox.posX, this.attackHitbox.posY, this.attackHitbox.width, this.attackHitbox.height)\r\n            if (this.timePassedAttack >= Constants.skeletonAttackSpeed) {\r\n                this.attackIndicator = false\r\n                this.attackLeft = true\r\n                this.timePassedAttack = 0\r\n                this.attackCooldown = Constants.skeletonAttackCooldown\r\n                this.activateDamage = true\r\n            }\r\n        }\r\n    }\r\n\r\n    drawHealthBar() {\r\n        this.context.fillStyle = '#757474'\r\n        this.context.fillRect(this.posX - this.width/4, this.posY - this.height/3 , this.outerBarWidth/2, 8)\r\n        this.context.fillStyle = '#f36f6f'\r\n        this.context.fillRect(this.posX - this.width/4, this.posY - this.height/3, this.health/2, 8)\r\n    }\r\n}","import {GameObject} from \"../models/GameObject\";\r\nimport {Player} from \"../models/player/Player\";\r\nimport {RectHitbox} from \"../models/RectHitbox\";\r\nimport {Skeleton} from \"../models/enemies/Skeleton\";\r\nimport {Constants} from \"../models/Constants\";\r\n\r\nexport class LogicHelper {\r\n    static detectCharacterCollusions(gameObjects: GameObject[]) {\r\n        let obj1;\r\n        let obj2;\r\n\r\n        // Reset collision state of all objects\r\n        for (const element of gameObjects) {\r\n            element.collides = false;\r\n        }\r\n\r\n        // Start checking for collisions\r\n        for (let i = 0; i < gameObjects.length; i++) {\r\n            obj1 = gameObjects[i];\r\n            for (let j = i + 1; j < gameObjects.length; j++) {\r\n                obj2 = gameObjects[j];\r\n                // compare obj1 with rest of objects\r\n                if (this.rectangularHitBoxIntersect(obj1, obj2)) {\r\n                    obj1.collides = true;\r\n                    obj2.collides = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static playerAttackCollusion(player: Player, gameObjects: GameObject[]) {\r\n        for (const element of gameObjects) {\r\n            if (element instanceof Skeleton)\r\n                if (player.attackIndicator && this.rectangularHitBoxIntersect(element, player.attackHitbox)) {\r\n                    if (player.activateDamage)\r\n                        element.health -= player.attackDamage\r\n                    player.activateDamage = false\r\n                    element.hit = true\r\n                    element.hitCooldown = Constants.skeletonHitCooldown\r\n                }\r\n        }\r\n    }\r\n\r\n    static skeletonAttackCollusion(skeleton: Skeleton, player: Player) {\r\n        if (skeleton.activateDamage && this.rectangularHitBoxIntersect(player, skeleton.attackHitbox)) {\r\n            player.health -= skeleton.attackDamage\r\n            player.hit = true\r\n            if (skeleton.attackRight){\r\n                player.hitLeft = true\r\n            }\r\n            else if (skeleton.attackLeft) {\r\n                player.hitRight = true\r\n            }\r\n            player.hitCooldown = Constants.playerHitCooldown\r\n        }\r\n        skeleton.resetAttack()\r\n    }\r\n\r\n\r\n    // returns true if given two objects intersect on rectangular hitbox\r\n    static rectangularHitBoxIntersect(object1: GameObject, object2: GameObject | RectHitbox): boolean {\r\n        return !(object1.posX > object2.width + object2.posX ||\r\n            object2.posX > object1.width + object1.posX ||\r\n            object1.posY > object2.height + object2.posY ||\r\n            object2.posY > object1.height + object1.posY)\r\n    }\r\n\r\n    static deleteDeadEnemies(elements: Skeleton[]): Skeleton[] {\r\n        return elements.filter(elements => !elements.dead)\r\n    }\r\n\r\n    static gameOver(player: Player) {\r\n\r\n    }\r\n}","import {Level} from \"../levelmodels/Level\";\r\n\r\nexport class Level1 extends Level{}","import {Collusion} from \"../../helpers/Collusion\";\r\nimport {MapElement} from \"./MapElement\";\r\nimport {LogicHelper} from \"../../helpers/LogicHelper\";\r\nimport {Player} from \"../player/Player\";\r\nimport {Skeleton} from \"../enemies/Skeleton\";\r\nimport {GameObject} from \"../GameObject\";\r\n\r\nexport class Level {\r\n    context: CanvasRenderingContext2D\r\n    mapElements: MapElement[]\r\n    collusion: Collusion\r\n    player: Player\r\n    enemies: Skeleton[]\r\n    levelImage\r\n\r\n    constructor(context: CanvasRenderingContext2D, mapElements: MapElement[], player: Player, enemies: Skeleton[], mapBoundaries:number [], imgSrc: any) {\r\n        this.context = context\r\n        this.mapElements = mapElements\r\n        this.player = player\r\n        this.enemies = enemies\r\n        this.collusion = new Collusion((this.enemies as GameObject[]).concat(this.player), this.mapElements, mapBoundaries)\r\n        this.context.strokeStyle = '#000000'\r\n        this.context.lineWidth = 5\r\n        this.levelImage = new Image()\r\n        this.levelImage.src = imgSrc\r\n    }\r\n\r\n    update(secondsPassed: number) {\r\n        this.draw()\r\n        this.enemies.forEach(enemy => enemy.update(secondsPassed))\r\n        this.player.update(secondsPassed)\r\n        this.collusion.applyTopCollusion()\r\n        this.collusion.applyWallCollisions()\r\n        this.collusion.applyBottomCollusion()\r\n        this.collusion.applyMapBoundaries()\r\n        // character collusion detection with other characters\r\n        // LogicHelper.detectCharacterCollusions((this.enemies as GameOobject[]).concat(this.player))\r\n        if (this.enemies.length > 0)\r\n            LogicHelper.skeletonAttackCollusion(this.enemies[0], this.player)\r\n        LogicHelper.playerAttackCollusion(this.player, this.enemies)\r\n        this.enemies = LogicHelper.deleteDeadEnemies(this.enemies)\r\n    }\r\n\r\n    draw() {\r\n        this.context.drawImage(this.levelImage, 0, 0)\r\n        // draw map elements\r\n        // this.mapElements.forEach(element => element.draw())\r\n    }\r\n}","import {Player} from \"../models/player/Player\";\r\n\r\nexport class PlayerUI {\r\n    outerBarWidth: number\r\n    outerBarAddConst: number = 4\r\n\r\n    constructor(readonly player: Player, private context: CanvasRenderingContext2D){\r\n        this.outerBarWidth = player.health + this.outerBarAddConst\r\n    }\r\n\r\n    drawUI(){\r\n        this.drawHealthBar()\r\n    }\r\n\r\n    drawHealthBar(){\r\n        this.context.fillStyle = '#757474'\r\n        this.context.fillRect(10, 10, this.outerBarWidth * 3, 24)\r\n        this.context.fillStyle = '#f36f6f'\r\n        this.context.fillRect(10 + this.outerBarAddConst * 3 /2, 10 + 2, this.player.health * 3, 20)\r\n        this.context.font = 'bold 15px Arial';\r\n        this.context.fillStyle = 'black';\r\n        this.context.fillText(`${this.player.health}`, 20, 27);\r\n    }\r\n}\r\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"aeL0w\")).toString();","import {Top} from \"../models/levelmodels/Top\";\r\nimport {Level1} from \"../models/levels/Level1\";\r\nimport {Level} from \"../models/levelmodels/Level\";\r\nimport {Player} from \"../models/player/Player\";\r\nimport {Skeleton} from \"../models/enemies/Skeleton\";\r\nimport {PlayerUI} from \"../UI/PlayerUI\";\r\nimport level1 from \"../assets/level/map.png\"\r\n\r\nexport class LevelHelper {\r\n    levels: Level[] = []\r\n    playerUI: PlayerUI\r\n\r\n    constructor(context: CanvasRenderingContext2D, player: Player, enemies: Skeleton[]) {\r\n        this.levels.push(\r\n            new Level1(\r\n                context,\r\n                // new StaticMapObject(1300, 650, 500, 200, context).getStaticMapObject().concat(\r\n                [\r\n                    new Top(0, 700, 1800, 10, context),\r\n                    new Top(0, 600, 280, 10, context)\r\n                ],\r\n                player,\r\n                enemies,\r\n                [20, 1750],\r\n                level1\r\n            )\r\n        )\r\n        this.playerUI = new PlayerUI(player, context)\r\n    }\r\n\r\n    update(secondsPassed: number) {\r\n        this.levels[0].update(secondsPassed)\r\n        this.playerUI.drawUI()\r\n    }\r\n\r\n}","import {Player} from \"./models/player/Player\";\r\nimport {Skeleton} from \"./models/enemies/Skeleton\";\r\nimport {LevelHelper} from \"./helpers/LevelHelper\";\r\nimport {Constants} from \"./models/Constants\";\r\nimport {InitHelper} from \"./helpers/InitHelper\";\r\n\r\nconst WIDTH: number = 1800\r\nconst HEIGHT: number = 800\r\nlet secondsPassed: number = 0\r\nlet oldTimeStamp: number = 0\r\nlet fps\r\nlet canvas: HTMLCanvasElement\r\nlet context: CanvasRenderingContext2D\r\nlet player: Player\r\nlet enemies: Skeleton[]\r\nlet levelHelper: LevelHelper\r\n\r\nwindow.onload = () => {\r\n        document.getElementById(\"loadingScreen\")!!.style.display = 'none'\r\n        startScreen()\r\n}\r\n\r\nfunction startScreen() {\r\n    document.getElementById(\"startScreen\")!!.style.display = 'block'\r\n    document.getElementById(\"startButton\")!!.addEventListener(\"click\", ()=>{\r\n        document.getElementById(\"canvasContainer\")!!.style.display = 'block'\r\n        document.getElementById(\"startScreen\")!!.style.display = 'none'\r\n        init()\r\n    })\r\n}\r\n\r\nfunction init() {\r\n    canvas = document.getElementById('gridCanvas') as HTMLCanvasElement\r\n    context = canvas.getContext('2d') as CanvasRenderingContext2D\r\n    canvas.width = WIDTH\r\n    canvas.height = HEIGHT\r\n    player = new Player(\r\n        context,\r\n        20,\r\n        450,\r\n        Constants.playerMoveSpeed,\r\n        Constants.playerJumpSpeed,\r\n        Constants.playerWidth,\r\n        Constants.playerHeight\r\n    )\r\n    enemies = InitHelper.spawnEnemies(0, context, player)\r\n    levelHelper = new LevelHelper(context, player, enemies)\r\n    window.requestAnimationFrame(update)\r\n}\r\n\r\nfunction update(timeStamp: number) {\r\n    secondsPassed = (timeStamp - oldTimeStamp) / 1000\r\n    oldTimeStamp = timeStamp\r\n    secondsPassed = Math.min(secondsPassed, 0.1)\r\n    context.clearRect(0, 0, canvas.width, canvas.height)\r\n    levelHelper.update(secondsPassed)\r\n    // drawFps()\r\n    window.requestAnimationFrame(update)\r\n}\r\n\r\nfunction drawFps() {\r\n    fps = Math.round(1 / secondsPassed)\r\n    context.font = '15px Arial';\r\n    context.fillStyle = 'black';\r\n    context.fillText(\"FPS: \" + fps, 5, 15);\r\n}\r\n","import {Skeleton} from \"../models/enemies/Skeleton\";\r\nimport {Constants} from \"../models/Constants\";\r\nimport {Player} from \"../models/player/Player\";\r\n\r\nexport class InitHelper {\r\n    static spawnEnemies(amount: number, context: CanvasRenderingContext2D, player: Player): Skeleton[] {\r\n        let enemies: Skeleton[] = []\r\n        for (let i = 0; i <= amount; i++) {\r\n            enemies.push(\r\n                new Skeleton(\r\n                    context,\r\n                    Math.floor(Math.random() * 500 + 700 ),\r\n                    550,\r\n                    Constants.skeletonMovementSpeed,\r\n                    300,\r\n                    Constants.skeletonWidth,\r\n                    Constants.skeletonHeight,\r\n                    player\r\n                )\r\n            )\r\n        }\r\n        return enemies\r\n    }\r\n\r\n}"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$46f93c439deb0a85$export$434da80b31429dcb","gravity","velocityX","velocityY","startVelocity","inAir","movementSpeed","fallSpeed","collides","moveLeftIndicator","moveRightIndicator","jumpIndicator","hit","hitLeft","hitRight","attackRight","attackLeft","dead","constructor","context","x","y","jumpSpeed","width","height","this","posX","posY","draw","visible","visibleOutlines","imageSmoothingEnabled","fillStyle","strokeStyle","lineWidth","fillRect","strokeRect","moveLeft","moveRight","stopMovingXAxis","secondsPassed","Math","min","floor","$6327fa8723df26b4$export$765f0a98ac268197","$de10c86d6314b1ac$export$40df750f1044ce5e","t","b","c","d","$39630714b70dc638$export$a002182e51710d39","static","$95e964a3b0ba922c$export$4f38d5dab52989cd","$13df15f5e2305489$exports","URL","resolve","import","meta","url","toString","$f5abb74e4bdb84ab$exports","$a7eed9991c775d78$exports","$20f0bb83484be978$exports","$ac0446ad0c6ca257$exports","$2f3585f183ca4ffe$exports","$24b736a8ba930565$exports","$fe2cd0a0aed172ef$exports","$6b3009b2f49aaa5e$exports","$fec441c677d075b0$exports","$62725305df57f834$exports","$3b2f50b09ad168f0$exports","$a19da621d62d482c$exports","$871927de5c19410a$exports","$6b97bf2c66c55d04$exports","$7a093fbb0c98bdf9$exports","$78b933966343eab5$exports","$42966bd7541bd66f$exports","$dbe4f0605484eb46$exports","$f578ecff6f07b5c3$exports","$68450e672f01d155$export$bd73ddfe5f8475d8","image","Image","frame","startingPoint","singleSpriteWidth","singleSpriteHeight","singleSpriteCount","imgSource","src","drawIndividualSprite","column","row","drawImage","animate","speed","playerWidth","playerHeight","$bd5d17e8c4c9bff2$export$3075603db8e6204c","drawSprite","$93cdc60a914a662b$export$3e5daf619d4d8d69","spriteSheetPlayerIdleRight","$parcel$interopDefault","spriteSheetPlayerIdleLeft","spriteSheetPlayerRunRight","spriteSheetPlayerRunLeft","spriteSheetPlayerJumpRight","spriteSheetPlayerJumpLeft","spriteSheetPlayerFallRight","spriteSheetPlayerFallLeft","spriteSheetPlayerCrouchRight","spriteSheetPlayerCrouchLeft","spriteSheetPlayerAttack1Right","spriteSheetPlayerAttack1Left","spriteSheetPlayerHurtRight","spriteSheetPlayerHurtLeft","spriteSheetPlayerDieRight","spriteSheetPlayerDieLeft","spritePlayerDeadRight","spritePlayerDeadLeft","spritePlayerDashRight","spritePlayerDashLeft","$8ec7ea99d0f94ccd$export$2616165974278734","faceDirection","RIGHT","attackHitbox","dashIndicator","attackIndicator","crouchIndicator","isCrouching","dashRange","timePassedRoll","timePassedAttack","rollCooldown","health","attackDamage","activateDamage","attackCooldown","hitCooldown","timePassedDying","super","rollPosition","initMovement","sprites","update","updateMovement","applyVelocity","jump","setRollPosition","applyRoll","applyAttack","applyCrouch","LEFT","fall","window","addEventListener","ev","key","resetCrouch","e","playerRollCooldown","activateAttackHitbox","playerAttackSpeed","playerAttackCooldown","playerHeightCrouch","playerMoveSpeed","resetActualsprite","playerDieAnimationTime","$06c4368af27c201f$export$c79fc6492f3af13d","$76ec82d7ce20902b$export$b5738e83c092973d","$dbc0ae59bdc2ca3b$export$cb4338d67ffa8a1d","$9eef8d600a5614a2$export$a1918a07d34ebe3","$dc9768eea0d7258f$export$254d4c7b77d00ced","$d9ad84df89cd72cd$export$abdc30227ab7aa51","gameObjects","mapElements","mapBoundaries","applyTopCollusion","forEach","mapElement","gameObject","object","collusionCheckTop","applyWallCollisions","checkLeftOrRightCollusion","filter","it","playerCollides","NONE","applyBottomCollusion","collusionCheckBot","applyMapBoundaries","$e86e6a728c7b2522$exports","$37d6104d756bdda9$exports","$89ead7c71811ede2$exports","$8bdc6d537a01d58e$exports","$fddbd3d959e2e319$exports","$a58ae46570b3cb3d$exports","$28ba698089830077$exports","$a40b2cd502d838ae$exports","$18c7760660979d37$exports","$651251c9813cf9f0$exports","$dbd5ea1f15a513b2$export$800263d821609534","spriteSheetIdleRight","spriteSheetIdleLeft","spriteSheetTakeHitRight","spriteSheetTakeHitLeft","spriteSheetWalkRight","spriteSheetWalkLeft","spriteSheetAttackRight","spriteSheetAttackLeft","spriteSheetDieRight","spriteSheetDieLeft","$da8591f22d9ea70f$export$8f31e4c4a37b8e9c","skeletonWidth","skeletonHeight","outerBarWidth","player","referenceGameObject","drawHealthBar","resetAttack","$571cef426d90b292$export$a52a427a286cb6","rectangularHitBoxIntersect","animationFinished","skeletonDieAnimationtime","secondsPast","skeletonActivateHitbox","skeletonAttackSpeed","skeletonAttackCooldown","obj1","obj2","element","j","skeletonHitCooldown","skeleton","playerHitCooldown","object1","object2","elements1","elements","$4f62d8308c58a5ff$export$2e720d0366b6ecb3","enemies","imgSrc","collusion","concat","levelImage","enemy","skeletonAttackCollusion","playerAttackCollusion","deleteDeadEnemies","$5d08c15ceeef2f08$export$1e1b698816f3feb7","outerBarAddConst","drawUI","font","fillText","$5e25549f676c2365$exports","$0dccd7b80cb9417d$export$4603d83085d95cac","levels","push","playerUI","$ad2bcec7a0192558$var$canvas","$ad2bcec7a0192558$var$context","$ad2bcec7a0192558$var$player","$ad2bcec7a0192558$var$enemies","$ad2bcec7a0192558$var$levelHelper","$ad2bcec7a0192558$var$secondsPassed","$ad2bcec7a0192558$var$oldTimeStamp","$ad2bcec7a0192558$var$update","timeStamp","clearRect","requestAnimationFrame","onload","document","getElementById","style","display","getContext","playerJumpSpeed","amount","random","skeletonMovementSpeed","spawnEnemies"],"version":3,"file":"index.139226a6.js.map"}